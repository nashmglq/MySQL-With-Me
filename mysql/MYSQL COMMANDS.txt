MYSQL COMMAND FOR QUERIES (THAT IS NEW TO ME);

SELECT DATABASE();  => to know what database you are using;

SELECT age + 10 FROM books; => new column with + 10 (tempo) 

HOW TO COMMENT?  => #

MYSQL FOLLOW PEMDAS

PEMDAS = Parentheses, Exponents, Multiply/Divide, Addition/Sub


Distinct in mysql => Provide the unique values or remove duplicates

SELECT DISTINCT column_name FROM table_name;


==================================================================================

WHERE CLAUSE 

What I don't know is that you can implement conditions (<, >, !, OR, AND)


LIKE STATEMENT
Just use normal query of SELECT but use "LIKE" instead of "="

SELECT * FROM table_name WHERE column_name LIKE 'something'

By adding % anything containing that char (if you only add end, it will only find the end, add in the front so it can also find the front)
While adding _ meaning specific


Example:
You want to search "World of Hello"

You do '%of%' = this will find before and after "of"

If you do "of%" = this will only find after and it will only work if it is the first letter and vice verse if you do "%of"


Now if you do "World __ World" = It will find the missing or specific part, you need to do this so it will get it all, but if you don't just use "%"



==================================================================================

ORDER BY;

Provide ordered

SELECT column_name FROM table_name ORDER BY column_name_basis ASC; = ascending
SELECT column_name FROM table_name ORDER BY column_name_basis DESC; = descending 

The order if double sorting_key, it will prioritize the first one

You can also use the len of the column as the reference such as (name is 1 so you call 1)


==================================================================================

AGGREGATED COLUMN

COUNT(), SUM(), AVG(), MAX(), and MIN()


==================================================================================


GROUP BY;
Group rows with the same value

Basic syntax:

SELECT column_name FROM table_name GROUP BY column_name_base_on_the_given

Syntax with AGGREGATED column

SELECT column_name, AVG(coulmn_name) FROM table_name GROUP BY column_name_base_on_the_given

If you provided a column that has been group (group the same value) you cannot use something 
unique

RULE: You cannot use two columns in GROUP BY without aggregation unless both are in GROUP BY.

EXAMPLE: SELECT department, age FROM employee GROUP BY department, age;

THIS WILL GROUP SAME AGE FROM SAME DEPARTMENT

EXAMPLE: SELECT AVG(age), department FROM EMPLOYEE GROUP BY age, department;

THIS WILL GET THE AVG AGE FOR SAME DEPARTMENT AND AGE (WHICH IS A BIT REDUNDANT)

==================================================================================

AS 

This will be used for Group By

So it will provide a column with name 

SELECT column_name, AVG(coulmn_name) AS temp_name FROM table_name GROUP BY column_name_base_on_the_given

You can use the references and call it (BUT ONLY ON THAT SINGLE QUERY)

==================================================================================
 
HAVING VS WHERE

THIS WONT WORK BECAUSE AGGREGATED COLUMN WILL ONLY BE CALCU AFTER GROUP BY: 

SELECT department, AVG(AGE) from employee WHERE AVG(AGE) > 35 GROUP BY department;

THIS WILL WORK:

SELECT department, AVG(AGE) from employee GROUP BY department HAVING AVG(AGE) > 35;

COMBINATION OF HAVING AND GROUPING


SELECT DEPARTMENT, AGE, AVG(SALARY)  
FROM EMPLOYEE  
WHERE AGE > 30  
GROUP BY DEPARTMENT, AGE  
HAVING AVG(SALARY) > 5000;  



HOW THIS WORK? 
filter nya muna laaht ng greater than 30

group nya eto sa mga ka same

NGAYON AFTER NG GROUP PEDE NA NYA CALCULATE UNG AVERAGE 


THEN PEDE MO NA GAWIN UNG HAVING AVG(SALARY) >  5000;


TO SUMMARIZE:

BAWAL GUMAMIT NG AGGREGATED FUNCTIONS SA WHERE KAYA NAG ERROR

DITO NA PAPASOK SI HAVING PARA MAGAMIT ITO


SI WHERE AY PARA LAMANG SA FILTERING NG SINGLE ROWS DI GAYA NG HAVING NA FILTERING NYA UNG MGA AGGREGATED


TEST SKILLS:

ðŸ”¹Get the average salary per department but only include departments with an average salary above 7000.

ANS: 

mysql> select department, avg(salary) from employee group by department having avg(salary) > 7000;


ðŸ”¹Get the average salary per department, but only include employees earning more than 5000 before grouping.

ANS:

select department, AVG(SALARY) from employee WHERE salary > 5000  GROUP BY department; 

# NOTE PEDE MO GAMITIN AS WHERE CONDITION KAHIT DI MO CALL

ðŸ”¹Count the number of employees per department but only include departments with more than 3 employees.

ANS.

SELECT DEPARTMENT, COUNT(NAME) FROM EMPLOYEE  GROUP BY DEPARTMENT HAVING COUNT(NAME) > 4;

# NOTE COUNT, TO COUNT THE NUMBER OF ROWS


ðŸ”¹ Goal: Get the average salary per department but only include:

Departments with at least 5 employees.
Employees with more than 3 years of experience before grouping.
Departments where the average salary (after filtering) is above 3000.


SELECT DEPARTMENT, COUNT(NAME), AVG(SALARY) FROM EMPLOYEE WHERE YEARS_OF_EXP > 3 GROUP BY DEPARTMENT HAVING COUNT(NAME) > 5 AND AVG(SALARY)>3000;


==================================================================================

LIMIT;

LIMIT â†’ Restricts the number of rows returned.

SELECT * FROM EMPLOYEE LIMIT 3
ONLY RETURN 3 ROWS

IF YOU DO
LIMIT 3,1

IT WILL SKIP 3 ROWS AND RETURN 1

SO YOU CAN SAY = SELECT * FROM EMPLOYEE LIMIT skips, how_many_rows_return



